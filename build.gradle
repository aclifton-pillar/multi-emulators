/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
    id "base"
}

description = 'A gradle build for running multiple mobile emulators'
version = '0.0'

def numberOfThings = 3
def startingEmulatorPort = 5574
def ports = (0..numberOfThings-1).collect { it * 2 + startingEmulatorPort }

task createDevices(group: "mobile") {
    ext.createDevices = { ->
        ports.each { port ->
            println("Creating device test_$port")
            exec {
                commandLine 'avdmanager', 'create', 'avd', '--name', "test_$port", '--package', 'system-images;android-28;google_apis_playstore;x86', '--device', 'Nexus 5X'
            }
        }
    }

    doFirst {
        createDevices()
    }
}

task spawnEmulators(group: "mobile", dependsOn: "createDevices") {
    ext.startEmulators = { ->
        ports.each { port ->
            println("Starting emulator test_$port")
            ProcessBuilder emulator = new ProcessBuilder()
            emulator.command('emulator', '-port', "$port", "@test_$port")
            emulator.start()
        }
    }

    ext.waitForEmulatorsToStart = { ->
        while (true) {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'adb', 'devices'
                standardOutput = stdout;
            }
            def statuses = "$stdout".split("\n").drop(1).collect { it.split()[1] }
            println('waiting for all emulators to boot...')
            sleep(3000)
            if (statuses && statuses.every { it == 'device' }) break;
        }
    }

    doFirst {
        startEmulators()
        waitForEmulatorsToStart()
    }
}

task launchApps(group: "mobile", dependsOn: "spawnEmulators") {
    ext.launchApps = { ->
        ports.each { port ->
            println("starting app on test_$port")
            // maybe have to move to app's working directory here later
            exec {
                commandLine 'react-native', 'run-android', '--deviceId', "test_$port"
            }
        }
    }

    doFirst {
        launchApps()
    }
}

task start(group: "mobile", dependsOn: "launchApps") {
    doLast {
        exec {
            commandLine 'avdmanager', 'list'
        }
    }
}

task stopEmulators(group: "mobile") {
    ext.stopEmulators = {
        ports.each { port ->
            try {
                exec {
                    commandLine 'adb', '-s', "emulator-$port", 'emu', 'kill'
                }
            } catch (Exception ex) {
                println ex
            }
        }
    }

    doFirst {
        stopEmulators()
    }
}

task deleteDevices(group: "mobile", dependsOn: "stopEmulators") {
    ext.deleteDevices = { ->
        ports.each { port ->
            exec {
                commandLine 'avdmanager', 'delete', 'avd', '--name', "test_$port"
            }
        }
    }

    doFirst {
        deleteDevices()
    }
}

task stop(group: "mobile", dependsOn: "deleteDevices") { }
